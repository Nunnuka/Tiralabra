
1. Ohjelman yleisrakenne

Vertailen kolmea eri kekorakennetta.

Bin‰‰rikeko:

Insert() -metodissa muutetaan ensin luku bin‰‰rimuotoon, sitten aloitetaan bin‰‰riluvun l‰pik‰ynti
toisesta numerosta siirtym‰ll‰ puussa vasemmalle jos numero on 0 ja oikealle, jos numero on 1.
Esimerkiksi luku 11 on bin‰‰rin‰ 1011. Nyt siis puussa liikuttaisiin vasen -> oikea -> oikea. 
          
	   x
 	 /   \
 	/     \
       /       \
      x        x
     / \      / \
     x   x   x   x
    / \ / \      
   x  x x 11 

Delete taas toimii siten, ett‰ korvataan juuri solmulla, joka on lis‰tty viimeisen‰. T‰m‰ etsit‰‰n samalla tavalla
kuin insertiss‰. Insertin ja deleten j‰lkeen rullataan solmu oikeaan paikkaan kutsumalla aina heap-up:ia tai 
heap-down:ia, jotka varmistavat ett‰ minimikeon ehdot t‰yttyv‰t.


Binomikeko:

Binomikeko koostuu useammasta puusta, jotka ovat kooltaan 2^n, n kuuluu luonnollisiin lukuihin.
Binomikeossa lis‰ys tapahtuu tekem‰ll‰ uudesta solmusta oma keko ja yhdist‰m‰ll‰ se jo 
olemasssaolevan keon kanssa. Kun havaitaan, ett‰ keossa on kaksi samankokoista alipuuta, ne yhdistet‰‰n 
merge() -metodin avulla. Pienimm‰m alkion poistamisessa aluksi pienin alkio, joka lˆytyy keon jostakin juuresta, 
poistetaan juurilistasta. Jos kyseisell‰ juurella on lapsia, j‰rjestys k‰‰nnet‰‰n, ne lis‰t‰‰n uuteen kekoon
ja taas yhdistet‰‰n uusi keko jo olemassaolevan keon kanssa. Pienin alkio etsit‰‰n etsi_min() -metodilla,
joka k‰y juurilistan l‰pi ja etsii niist‰ pienimm‰n alkion.
Binomikeon toteutuksessa lˆytyy toString-metodi, joka helpottaa keon hahmottamista tulostamalla juurilistan
ja lapset eri kerroksissa.

Fibonaccikeko:

Fibonaccikeon insert on yksinkertainen: alkiot vain lis‰t‰‰n kahteen suuntaan linkitettyyn listaan oikeaan
paikkaan, ja tarkastetaan olisiko lis‰tt‰v‰ pienempi kuin t‰m‰nhetkinen minimi. Pienint‰ alkiota poistettaessa 
ensiksi poistetaan pienimm‰n arvon omaava alkio juurilistasta, ja sen lapsista tulee uusia juuria uusille alipuille. 
Decrease key v‰hent‰‰ yhden alkion arvoa, mik‰li parametrin‰ on pienempi arvo. Jos kekoehto vioittuu eli alkion
vanhemmalla on pienempi arvo, leikataan solmu vanhemmasta. Jos vanhempi ei ole juuri, se merkit‰‰n. Jos se on jo 
merkitty, se myˆs se leikataan ja sen vanhempi merkit‰‰n. T‰t‰ jatketaan puussa ylˆsp‰in, kunnes p‰‰st‰‰m 
merkitsem‰ttˆm‰‰n solmuun. Delete v‰hent‰‰ solmun arvon mahdollisimman pieneksi, jolloin siit‰ tulee koko keon 
pienin. Sitten kutsutaan pienimm‰n alkion poistoa.

2. Saavutetut aika- ja tilavaativuudet (m.m. O-analyysi pseudokoodista)

M‰‰rittelydokumentin aikavaativuudet on saavutettu.

3. Suorituskyky- ja O-analyysivertailu (mik‰li tyˆ vertailupainotteinen)

Vertailussa keskeisimm‰t metodit.

		Bin‰‰rikeko | Binomikeko | Fibonaccikeko 
insert		  O(log n)  |  O(log n)  |     O(1)
deleteMin	  O(log n)  |  O(log n)  |     O(log n) amortisoitu
decreaseKey	  O(log n)  |  O(log n)  |     O(1)
	   	            |            |
100000 lis‰ys       150ms   |     75ms   |      20ms
100000 poisto       130ms   |     30ms   |     120ms
			    |            |
k‰‰nteinen lis‰ys    90ms   |     55ms   |      40ms
k‰‰nteinen poisto    60ms   |     13ms   |     150ms  

Binaarikeko: 
Aikaa kului 100000 alkion lis‰ykseen: 150.0ms.
Aikaa kului 1000000 alkion lis‰ykseen: 1543.0ms.
Aikaa 100000 alkion poistamiseen kului: 130.0ms.

K‰‰nteinen 100000 alkion (100000, 99999... 1, 0) lis‰ys vei aikaa 90.0ms.
Nyt 100000 alkion poisto vei aikaa 60.0ms.

Binomikeko: 
Aikaa kului 100000 alkion lis‰ykseen: 75.0ms.
Aikaa kului 1000000 alkion lis‰ykseen: 751.0ms
Aikaa 100000 alkion poistamiseen kului: 30.0ms.

K‰‰nteinen 100000 alkion (100000, 99999... 1, 0) lis‰ys vei aikaa 55.0ms.
Nyt 100000 alkion poisto vei aikaa 13.0ms.

Fibonaccikeko:
Aikaa kului 100000 alkion lis‰ykseen: 20.0ms.
Aikaa kului 1000000 alkion lis‰ykseen: 475.0ms.
Aikaa 100000 alkion poistamiseen kului: 120.0ms.

K‰‰nteinen 100000 alkion lis‰ys vei aikaa 40.0ms.
Aikaa 100000 alkion poistamiseen kului 150.0ms.



4. Tyˆn mahdolliset puutteet ja parannusehdotukset

5. L‰hteet

http://en.wikipedia.org/wiki/Binary_heap
http://en.wikipedia.org/wiki/Binomial_heap
Cormen, Leiserson, Rivest, Stein: Introduction to Algorithms
